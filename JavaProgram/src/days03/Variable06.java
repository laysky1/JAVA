package days03;

import java.util.Scanner;

public class Variable06 {

	public static void main(String[] args) {
		//기본형 변수
		//정수형 : byte(1), short(2), int(4-기본형) -21억~21억, long(8)
		//실수형 : float(4), double(8-기본형)
		//문자형 : char(2)
		//진위형 : boolean
		//기본형 자료 - 자료형을 코딩했을때 굵은 자주색 폰트로 표시되는 자료형. 위에 쓴 자료형들이 모두 해당
		
		int a;
		double b;
		char c;
		boolean d;
		String s;
		 //문자열(String) : 객체 자료형 , 정해진 자료의 용량은 없습니다.
		
		//정수(Long형)와 실수(float)를 표시하는 별도의 방법
		//정수의 기본형은 int이다.
		int a1 = 100; //100은 기본형 정수 자료이므로 int변수에 대입이 가능합니다.
		//byte a2 = a1; //에러 , int는 4바이트 byte는 1바이트 int형 자료를 byte형 변수에 넣으면
		//데이터 손실이 일어나서 에러를 발생합니다.
		// byte a2 = 123456; // 용량을 초과하는 정수 데이터도 에러
		
		double b1 = 123.456; //123.456은 기본형 실수 자료이므로 double 변수에 대입이 가능합니다.
		//float b2 = 123.123; // 아무론 표시없는 123.456은 기본형 double로 인식되기때문에 이는 에러입니다.
		float b2 = 123.123F;
		
		//100(int형), 100L(long형), 123.12(double형), 123.12F(float 형)
		//변수에 저장되지 않은 자료중 정수는 뒤에 L이 있는지 여부에 따라 Long과 int로 구분되고
		//실수는 뒤에 F가 있는지 여부에 따라 float와 double로 구분됩니다.
		
		
		
		// 변수의 다양한 선언(생성)방법
		
		// 1. 변수 선언 후 값은 할당(대입)
		int n1;
		n1=10;
		
		// 2. 변수의 선언과 값의 대입을 동시에 처리
		int n2 = 20;

		Scanner sc=new Scanner(System.in);
	   /* 실행보류
		int n3 = sc.nextInt();
	
		*/
		// 3. 다수개의 변수를 한번에 선언하는 방법(동일한 자료형만 가능)
		int n3,n4, n5;
		// 4. 다수개의 변수를 값을 대입하면서 생성하는 방법
		int n6 = 60, n7 = 70;
		// 5. 처음부터 모든 변수에 값을 대입할 필요는 없음
		int n8, n9 = 90, n10;
		
		// 변수의 선언 위치
		// 변수의 사용 전이라면 위치에 관계없이 변수를 선언할 수 있습니다.
		// 변수는 반드시 선언(생성) 후에 사용할 수 있으며, 선언전에 사용하는 변수는 오류
		
		int v1 =10;
		System.out.println("프로그램 시작 v1변수의 값 : + v1");
		
		//System.out.println(프로그램 시작 v3변수의 값 : + v3); // 에러 - 실행순서 상 만들어지지 않은 변수 사용
		int v3 =30;
		//v3변수가 생성되었으므로 아래 코드는 정상 실행
		System.out.printf("v3 변수의 값 %d\n", v3);
		
		
		
		// 변수는 선언 이후라도, 값이 대입되지 않으면 사용이 불가합니다.
		int v4;
		// 아래코드는 v4 변수값이 하나도 저장되지 않았기 때문에 오류를 발생합니다.
		// System.out.printf("v4 변수의 값 %d\n",v4); //오류
		v4=40;
		System.out.printf("v4 변수의 값 %d\n",v4);
		
		//char에는 아스키코드 값이 있어서 char들 간의 산술연산도 가능합니다.
		//대문자 B 값에 32를 더하여 소문자 b로 변경 
		char ch = 'B';
		System.out.printf("%c +32->%c\n",ch,ch+32);
		//알파벳 'A'의 아스키 코드 :65 알파벳 'a'의 아스키코드 : 97 둘 사이의 차이는 32 입니다.
		//아라비아 기호'8'에서 아라비아 기호 '0'을 빼면 , 수치 데이터 정수 8이 결과로 나옵니다.
		System.out.printf("'8'-'0'->%d\n",'8'-'0');
		
		
		
		// 실수형 변수의 값 대입 or 초기화
		// 자바에서 모든 실수들은 별도의 표기가 없으면, 기본적으로 double 타입으로 인식합니다.
		
		//float 타입으로 값을 저장하기 위해서는 float 형 변수를 선언하고 float 형 데이터를 저장합니다.
		// float 변수에 double 형 데이터 입력 ->오류
		// float f1 = 1.123; //에러
		// float 변수에 float 형 데이터 입력 -> 1.123F;
		float f2 = 1.1234f; // 또는 float f2 = 1.123F;

		// float 변수에 캐스팅 연산을 적용한 double 형 데이터 입력 ->정상 실행
		double f3 =1.123;
		float f4 = (float)f3;
		// 용량이 큰 자료형(double)에 작은 자료형(float) 데이터 대입 -> 정상실행
		float f5= 123.123F;
		double f6 = f5; //캐스팅연산이 필요 없습니다.


		//정수들의 값의 대입
		int a5 = 100;
		byte b5 = (byte)a5;
		//byte b6 = a5; // 에러 - 변수를 이용한 값의 대입은 캐스팅이 필요
		byte b7 = 123; //일반값에 의한 대입은 캐스팅이 필요가 없습니다. (정수 데이터에 한해서만 허용)
		a5=b5; //용량이 작은 자료형을 큰 자료형에 대입은 정상실행
		// 용량이 큰 변수값을 용량이 작은 변수값으로 넣으려고 하면 캐스팅 연산 필요
		//반대의 경우는 문제없이 모든 실행이 가능합니다.
		
		
	}

}
