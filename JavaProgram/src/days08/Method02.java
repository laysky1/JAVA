package days08;

// 메서드를 사용하는 두번째 목적
// 명령들의 단순실행이 아닌 소정의 값을 연산하기 위한 명령들의 반복실행
// 예 : 사각형의 넓이를 계산하는 메서드, 삼각형의 넓이를 계산하는 메서드,
//	  성적표를 양식에 맞게 출력하는 메서드, 달력을 양식에 맞게 출력하는 메서드

// 두번째 목적에 필요한 메서드를 그들이 실행되기 위해, 필요한 값들이 있습니다.
// 사각형의 넓이는 밑변의 길이와 높이가 필요
// 성적표는 국어, 영어, 수학, 총점, 평균이 필요
// 달력은 년과 월이 필요
// 두번째 목적으로 함수를 만들려면 필요한 값들을 함수에 전달하고 실행되게 해야합니다.
// 호출한 곳에서 넣어주는 값을 전달인수라고 부르고
// 메서드에서 전달된 값을 받아주는 변수를 매개변수라고 부릅니다.

// 매개변수:
// 메서드 호출시 메서드가 필요로하는 데이터를 전달해줄 수 있는 매개역학의 변수
// 메서드 호출시 괄호안에 넣어주는 데이터 : 전달인수
// 메서드의 몸체에서 괄호안에 위치하면 전달된 값을 받아주는 변수 : 매개변수

public class Method02 {

	//String[] args : main 메서드의 매개변수->프로그램 실행명령과 함께 전달되는 전달이수들이 저장되는 변수
	//d:\>java Method02 전달인수
	public static void main(String[] args) {
		//myPrint 메서드를 호출합니다.
		myPrint(200); //메서드는 정의된 형태로 호출해야 정상 호출이 됩니다.
		myPrintWith2int(100,200);
		int k1=300, k2=400;
		myPrintWith2int(k1,k2);//전달인수는 직접 값을 지정할 수도 있지만, 변수로 대체할수도 있습니다.
		// 변수가 전달인수가 되면 변수가 전달되는 게 아니라 변수에 저장된 값들이 저장됩니다.
	}
	
	// 매개변수의 선언
	// public static void 메서드이름( 자료형 매개변수이름, 자료형 매개변수이름...){
	// }
	// 괄호안에 변수를 선언하고 쓰는 형식, 매개변수 또한 필요한 갯수만큼 선언해서 사용할 수 있습니다.
	public static void myPrint( int n ) {
		System.out.println("전달받은 매개변수의 값 n : "+n);
	}
	// int n :매개변수.
	// 함수 호출시에 전달인수로 넣어준 200이 매개변수 int n에 저장되고
	// 그 변수는 myPrint 메서드안에서 활용이 가능합니다.

	// 다수의 매개변수를 전달 받는 매서드의 형태-각 매개변수 별로 전달받을 변수를 선언합니다.
	// 동일한 다입이라도 자료형의 생략은 허용되지 않습니다. (int n1, n2) X
	public static void myPrintWith2int(int n1, int n2) {
		System.out.println("전달받은 매개변수의 값n1 : "+n1+", n2 : "+ n2);
		
	}
	// 전달인수는 반드시 매개변수의 자료형과 일치하는 자료를 전달해줘야 합니다.
	// 다수개의 값을 전달할때는 자료형과 순서도 일치하게 전달해줘야합니다.
	// 매개변수 acb(int x, double y) 전달인수 abc(300.0, 500)X
}
